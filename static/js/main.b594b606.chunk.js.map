{"version":3,"sources":["thumb-down.svg","thumb-up.svg","up-arrow.svg","loading.svg","utils/getRandomColor.ts","tensorflow/model.ts","styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getRandomColor","hue","Math","random","hi","floor","f","p","VALUE","q","t","r","g","b","Model","model","currentSelections","this","tf","add","dense","units","inputShape","activation","compile","loss","optimizer","colors","selections","onFinishedLearning","console","log","xs","Array","from","Set","ys","map","selection","findIndex","currentSelection","fit","epochs","shuffle","then","catch","e","message","color","prediction","predict","dataSync","truePercentage","length","i","Container","styled","props","currentColor","join","VoteContainer","Button","CheckboxLabel","Header","rotate","keyframes","GuessIcon","isLearning","percentage","css","App","useState","setCurrentColor","setColors","setSelections","setIsLearning","setPercentage","disableLearning","setDisableLearning","useRef","useEffect","current","learn","slice","makeSelection","colorLabel","newColor","previousColors","previousSelections","type","name","onClick","href","src","ThumbUpIcon","alt","ThumbDownIcon","LoadingIcon","UpArrowIcon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b594b606.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thumb-down.96bdc12e.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumb-up.cbf4a4aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/up-arrow.cb215ae4.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.34f48416.svg\";","const GOLDEN_RATIO = 0.618033988749895;\nconst SATURATION = 0.6;\nconst VALUE = 0.95;\n\nconst getRandomColor = () => {\n  let hue = (Math.random() + GOLDEN_RATIO) % 1;\n  var hi = Math.floor(hue * 6)\n  var f = hue * 6 - hi\n  var p = VALUE * (1 - SATURATION)\n  var q = VALUE * (1 - f * SATURATION)\n  var t = VALUE * (1 - (1 - f) * SATURATION)\n  var r = 255\n  var g = 255\n  var b = 255\n\n  switch (hi) {\n    case 0: r = VALUE; g = t; b = p; break\n    case 1: r = q; g = VALUE; b = p; break\n    case 2: r = p; g = VALUE; b = t; break\n    case 3: r = p; g = q; b = VALUE; break\n    case 4: r = t; g = p; b = VALUE; break\n    case 5: r = VALUE; g = p; b = q; break\n  }\n  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)]\n}\n\nexport default getRandomColor;","import * as tf from '@tensorflow/tfjs';\n\nexport default class Model {\n  model: tf.Sequential;\n  currentSelections: boolean[] ;\n  constructor() {\n    this.currentSelections = [true, false];\n    this.model = tf.sequential();\n    this.model.add(tf.layers.dense({units: 10, inputShape: [3], activation: 'sigmoid' }));\n    this.model.add(tf.layers.dense({units: 10, activation: 'sigmoid' }));\n    this.model.add(tf.layers.dense({units: 2, activation: 'softmax' }));\n    this.model.compile({ loss: 'categoricalCrossentropy', optimizer: 'adam' });\n  }\n\n  learn(colors: number[][], selections: boolean[], onFinishedLearning: () => void) {\n    console.log('learning...')\n    const xs = tf.tensor(colors);\n    this.currentSelections = Array.from(new Set(selections))\n    const ys = tf.oneHot(tf.tensor1d(selections.map(selection => (\n      this.currentSelections.findIndex(currentSelection => currentSelection === selection)\n    )), 'int32'), 2);\n\n    this.model.fit(xs, ys, {epochs: 200, shuffle: true}).then(() => {\n      onFinishedLearning();\n      console.log('learning finished')\n    }).catch((e: { message: string }) => {\n      console.log(e.message);\n    });\n  }\n\n  predict(color: number[]) {\n    console.log('predicting...')\n    const tensor = this.model.predict(tf.tensor([color])) as tf.Tensor<tf.Rank>;\n    const prediction = tensor.dataSync();\n    let truePercentage = 0.5;\n    if (this.currentSelections.length === 1) {\n      this.currentSelections[1] = !this.currentSelections[0]\n    }\n\n    for (let i = 0; i < Array.from(prediction).length; i += 1) {\n      console.log(this.currentSelections[i], Array.from(prediction)[i]);\n      if (this.currentSelections[i]) {\n        truePercentage = Array.from(prediction)[i] as number;\n      }\n    }\n\n    return truePercentage;\n  }\n}\n","import styled, { keyframes, css } from \"styled-components\";\n\nexport const Container = styled(\"main\")<{ currentColor: number[] }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  box-sizing: border-box;\n  min-height: 100vh;\n  background-color: rgb(${props => props.currentColor.join(\",\")});\n  padding: 48px 24px;\n`;\n\nexport const VoteContainer = styled(\"section\")`\n  display: flex;\n  position: relative;\n  background-color: white;\n  border-radius: 8px;\n`;\n\nexport const Button = styled(\"button\")`\n  border: none;\n  cursor: pointer;\n  background: none;\n  padding: 24px;\n  width: 120px;\n\n  img {\n    transition: transform 200ms;\n    max-width: 120px;\n  }\n\n  :hover {\n    img {\n      transform: scale(1.15);\n    }\n  }\n`;\n\nexport const CheckboxLabel = styled(\"label\")`\n  display: block;\n\n  input,\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport const Header = styled(\"header\")`\n  font-family: \"Roboto\", sans-serif;\n  text-align: center;\n  background-color: white;\n  padding: 24px;\n  border-radius: 8px;\n\n  h1 {\n    color: #181818;\n    font-size: 40px;\n    font-weight: 400;\n    margin: 0 0 24px;\n  }\n\n  p,\n  a:visited,\n  a:focus,\n  a:active,\n  label {\n    color: #6a737d;\n    font-size: 14px;\n  }\n\n  p,\n  label {\n    margin: 0 0 12px;\n  }\n\n  b {\n    color: #181818;\n    font-weight: 500;\n  }\n`;\n\nexport const rotate = keyframes`\n  from {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const GuessIcon = styled(\"img\")<{ percentage: number, isLearning: boolean }>`\n  position: absolute;\n  width: 32px;\n  bottom: -16px;\n  transition: margin 200ms;\n  margin-left: ${props =>\n    props.isLearning\n      ? \"calc(50% - 16px)\"\n      : `calc((100% - 32px) * (1 - ${props.percentage}))`};\n\n  ${props =>\n    props.isLearning &&\n    css`\n      animation: ${rotate} 1s infinite;\n    `};\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport getRandomColor from \"./utils/getRandomColor\";\nimport Model from \"./tensorflow/model\";\nimport ThumbDownIcon from \"./thumb-down.svg\";\nimport ThumbUpIcon from \"./thumb-up.svg\";\nimport UpArrowIcon from \"./up-arrow.svg\";\nimport LoadingIcon from \"./loading.svg\";\nimport { Container, Header, VoteContainer, Button, GuessIcon, CheckboxLabel } from \"./styles\";\n\nconst App: React.FC = () => {\n  const [currentColor, setCurrentColor] = useState(getRandomColor());\n  const [colors, setColors] = useState([currentColor]);\n  const [selections, setSelections] = useState([] as boolean[]);\n  const [isLearning, setIsLearning] = useState(false);\n  const [percentage, setPercentage] = useState(0.5);\n  const [disableLearning, setDisableLearning] = useState(false);\n  const model = useRef(new Model());\n\n  useEffect(() => {\n    if (selections.length > 0 && colors.length > 1) {\n      setPercentage(model.current.predict(currentColor));\n    }\n  }, [currentColor, selections.length, colors.length]);\n\n  useEffect(() => {\n    if (\n      !disableLearning &&\n      selections.length > 0 &&\n      selections.length % 10 === 0\n    ) {\n      setIsLearning(true);\n      model.current.learn(colors.slice(0, -1), selections, () =>\n        setIsLearning(false)\n      );\n    }\n  }, [selections, colors, disableLearning]);\n\n  const makeSelection = (colorLabel: boolean) => {\n    const newColor = getRandomColor();\n    setCurrentColor(newColor);\n    setColors(previousColors => [...previousColors, newColor]);\n    setSelections(previousSelections => [...previousSelections, colorLabel]);\n  };\n\n  return (\n    <Container currentColor={currentColor}>\n      <Header>\n        <h1>Do you like this colour?</h1>\n        <p>\n          After every 10 selections ({10 - (selections.length % 10)} remaining)\n          the model will try and learn your preferences and guess them (see\n          arrow)\n        </p>\n        <CheckboxLabel>\n          <input\n            type=\"checkbox\"\n            name=\"disableLearning\"\n            onClick={() => setDisableLearning(!disableLearning)}\n          />\n          <b>Disable Learning</b> (improve performance after adequate learning\n          has been achieved)\n        </CheckboxLabel>\n        <p>\n          Check out the code for this on{\" \"}\n          <a href=\"https://github.com/RowanCarmichael/machine-learning-color-picker\">\n            Github\n          </a>\n        </p>\n      </Header>\n      <VoteContainer>\n        <Button onClick={() => makeSelection(true)}>\n          <img src={ThumbUpIcon} alt=\"Thumb up\" />\n        </Button>\n        <Button onClick={() => makeSelection(false)}>\n          <img src={ThumbDownIcon} alt=\"Thumb down\" />\n        </Button>\n        <GuessIcon\n          src={isLearning ? LoadingIcon : UpArrowIcon}\n          isLearning={isLearning}\n          percentage={percentage}\n        />\n      </VoteContainer>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}